basePath: /api
definitions:
  auth.AuthResponse:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
      user:
        $ref: '#/definitions/auth.UserResponse'
    type: object
  auth.ChangePasswordRequest:
    properties:
      new_password:
        maxLength: 72
        minLength: 8
        type: string
      old_password:
        type: string
      password_confirm:
        type: string
    required:
    - new_password
    - old_password
    - password_confirm
    type: object
  auth.ForgotPasswordRequest:
    properties:
      email:
        example: john@example.com
        type: string
    required:
    - email
    type: object
  auth.LoginRequest:
    properties:
      login_identifier:
        description: Can be email or username
        example: john@example.com
        type: string
      password:
        example: password123
        type: string
    required:
    - login_identifier
    - password
    type: object
  auth.LogoutRequest:
    properties:
      invalidate_all_sessions:
        description: If true, invalidate all user's sessions
        type: boolean
      refresh_token:
        description: 'Optional: specific token to invalidate'
        type: string
    type: object
  auth.OTPRequest:
    properties:
      phone:
        example: "+919876543210"
        type: string
    required:
    - phone
    type: object
  auth.RefreshTokenRequest:
    properties:
      refresh_token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
    required:
    - refresh_token
    type: object
  auth.RegisterRequest:
    properties:
      address:
        type: string
      bio:
        type: string
      city:
        type: string
      coordinates:
        $ref: '#/definitions/models.Coordinates'
      country:
        type: string
      district:
        type: string
      email:
        type: string
      name:
        type: string
      password:
        minLength: 8
        type: string
      phone:
        type: string
      postal_code:
        type: string
      preferred_sports:
        items:
          type: string
        type: array
      role:
        items:
          type: string
        type: array
      social_media:
        $ref: '#/definitions/models.SocialMedia'
      state:
        type: string
      username:
        type: string
    required:
    - email
    - name
    - password
    - phone
    - username
    type: object
  auth.ResendVerificationRequest:
    properties:
      email:
        example: johndoe@example.com
        type: string
    required:
    - email
    type: object
  auth.ResetPasswordRequest:
    properties:
      password:
        example: newpassword123
        maxLength: 72
        minLength: 8
        type: string
      password_confirm:
        example: newpassword123
        type: string
      token:
        example: reset-token-123456
        type: string
    required:
    - password
    - password_confirm
    - token
    type: object
  auth.UpdateProfileRequest:
    properties:
      address:
        example: 123 Main St
        type: string
      bio:
        example: Avid cricketer and developer.
        type: string
      city:
        example: Mumbai
        type: string
      coordinates:
        $ref: '#/definitions/models.Coordinates'
      country:
        example: India
        type: string
      district:
        example: Mumbai Suburban
        type: string
      name:
        example: John Doe
        type: string
      postal_code:
        example: "400001"
        type: string
      preferred_sports:
        items:
          type: string
        type: array
      social_media:
        $ref: '#/definitions/models.SocialMedia'
      state:
        example: Maharashtra
        type: string
      username:
        example: john_doe_new
        maxLength: 30
        minLength: 3
        type: string
    type: object
  auth.UserResponse:
    properties:
      address:
        type: string
      bio:
        type: string
      city:
        type: string
      coordinates:
        $ref: '#/definitions/models.Coordinates'
      country:
        type: string
      created_at:
        type: string
      district:
        type: string
      email:
        type: string
      email_verified:
        type: boolean
      id:
        type: integer
      last_active:
        type: string
      name:
        type: string
      phone:
        type: string
      phone_verified:
        type: boolean
      postal_code:
        type: string
      preferred_sports:
        items:
          type: string
        type: array
      profile_image:
        type: string
      roles:
        items:
          type: string
        type: array
      social_media:
        $ref: '#/definitions/models.SocialMedia'
      state:
        type: string
      updated_at:
        type: string
      username:
        type: string
      verified:
        type: boolean
    type: object
  auth.VerifyOTPRequest:
    properties:
      code:
        description: Assuming 6 digit OTP
        example: "123456"
        type: string
      phone:
        example: "+919876543210"
        type: string
    required:
    - code
    - phone
    type: object
  models.Coordinates:
    properties:
      latitude:
        type: number
      longitude:
        type: number
    type: object
  models.SocialMedia:
    properties:
      facebook:
        type: string
      instagram:
        type: string
      linkedin:
        type: string
      twitter:
        type: string
    type: object
  responses.ErrorResponse:
    properties:
      errors: {}
      message:
        type: string
      status:
        type: string
    type: object
  responses.PaginatedResponse:
    properties:
      data: {}
      message:
        type: string
      page:
        type: integer
      page_size:
        type: integer
      status:
        type: string
      total:
        type: integer
      total_pages:
        type: integer
    type: object
  responses.SuccessResponse:
    properties:
      data: {}
      message:
        type: string
      status:
        type: string
    type: object
  sport.CreateSkillRequest:
    properties:
      description:
        maxLength: 1000
        type: string
      name:
        maxLength: 100
        minLength: 3
        type: string
      weight:
        maximum: 10
        minimum: 0
        type: number
    required:
    - name
    type: object
  sport.CreateSportRequest:
    properties:
      description:
        maxLength: 5000
        type: string
      equipment:
        $ref: '#/definitions/sport.Equipment'
      icon:
        maxLength: 255
        type: string
      is_active:
        description: Pointer to distinguish between not provided and false
        type: boolean
      name:
        maxLength: 100
        minLength: 3
        type: string
      positions:
        items:
          $ref: '#/definitions/sport.Position'
        type: array
      rules:
        $ref: '#/definitions/sport.Rules'
    required:
    - name
    type: object
  sport.Equipment:
    properties:
      description:
        type: string
      is_required:
        type: boolean
      name:
        type: string
    type: object
  sport.Position:
    properties:
      abbreviation:
        type: string
      description:
        type: string
      name:
        type: string
    type: object
  sport.Rules:
    properties:
      game_duration:
        description: e.g., "90 minutes", "4 quarters of 12 minutes"
        type: string
      max_players:
        type: integer
      min_players:
        type: integer
      other:
        type: string
    type: object
  sport.Skill:
    properties:
      created_at:
        type: string
      deleted_at:
        type: string
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      sport_id:
        description: Foreign key to Sport
        type: integer
      updated_at:
        type: string
      weight:
        description: Importance factor of the skill
        type: number
    type: object
  sport.Sport:
    properties:
      created_at:
        type: string
      deleted_at:
        type: string
      description:
        type: string
      equipment:
        items:
          $ref: '#/definitions/sport.Equipment'
        type: array
      icon:
        description: URL or path to icon
        type: string
      id:
        type: integer
      is_active:
        description: To soft-enable/disable sport visibility
        type: boolean
      name:
        type: string
      positions:
        items:
          $ref: '#/definitions/sport.Position'
        type: array
      required_skills:
        description: Skills associated with this sport
        items:
          $ref: '#/definitions/sport.Skill'
        type: array
      rules:
        $ref: '#/definitions/sport.Rules'
      updated_at:
        type: string
    type: object
  sport.UpdateSkillRequest:
    properties:
      description:
        maxLength: 1000
        type: string
      name:
        maxLength: 100
        minLength: 3
        type: string
      weight:
        maximum: 10
        minimum: 0
        type: number
    type: object
  sport.UpdateSportRequest:
    properties:
      description:
        maxLength: 5000
        type: string
      equipment:
        $ref: '#/definitions/sport.Equipment'
      icon:
        maxLength: 255
        type: string
      is_active:
        type: boolean
      name:
        maxLength: 100
        minLength: 3
        type: string
      positions:
        items:
          $ref: '#/definitions/sport.Position'
        type: array
      rules:
        allOf:
        - $ref: '#/definitions/sport.Rules'
        description: Pointer to allow partial update of complex fields
    type: object
  sport.UserSport:
    properties:
      created_at:
        type: string
      deleted_at:
        type: string
      id:
        type: integer
      level:
        description: e.g., "Beginner", "Intermediate", "Advanced", "Professional"
        type: string
      position:
        description: e.g., "Forward", "Goalkeeper"
        type: string
      sport:
        allOf:
        - $ref: '#/definitions/sport.Sport'
        description: Eager load sport details
      sport_id:
        type: integer
      updated_at:
        type: string
      user_id:
        type: integer
    type: object
  sport.UserSportRequest:
    properties:
      level:
        description: e.g., "Beginner", "Intermediate"
        maxLength: 50
        type: string
      position:
        maxLength: 100
        type: string
      sport_id:
        type: integer
    required:
    - sport_id
    type: object
  utils.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  utils.PaginatedResponse:
    properties:
      data: {}
      pagination:
        $ref: '#/definitions/utils.PaginationData'
    type: object
  utils.PaginationData:
    properties:
      has_next:
        type: boolean
      has_prev:
        type: boolean
      limit:
        type: integer
      page:
        type: integer
      total:
        type: integer
      total_pages:
        type: integer
    type: object
  utils.SuccessResponse:
    properties:
      data: {}
      message:
        type: string
    type: object
  venue.AutoTimeSlotInput:
    properties:
      booking_type:
        type: string
      court_numbers:
        items:
          type: integer
        type: array
      days_of_week:
        items:
          type: string
        type: array
      duration:
        minimum: 15
        type: integer
      end_date:
        type: string
      end_time:
        type: string
      equipment:
        type: string
      price:
        minimum: 0
        type: number
      start_date:
        type: string
      start_time:
        type: string
    required:
    - court_numbers
    - days_of_week
    - duration
    - end_date
    - end_time
    - price
    - start_date
    - start_time
    type: object
  venue.Booking:
    properties:
      created_at:
        type: string
      deleted_at:
        type: string
      end_time:
        type: string
      ground:
        $ref: '#/definitions/venue.Ground'
      ground_id:
        type: integer
      id:
        type: integer
      purpose:
        type: string
      start_time:
        type: string
      status:
        type: string
      updated_at:
        type: string
      user_id:
        type: integer
    type: object
  venue.CourtInput:
    properties:
      description:
        type: string
      name:
        type: string
      type:
        type: string
    required:
    - name
    - type
    type: object
  venue.CreateBookingRequest:
    properties:
      end_time:
        type: string
      ground_id:
        type: integer
      purpose:
        type: string
      start_time:
        type: string
    required:
    - end_time
    - ground_id
    - start_time
    type: object
  venue.Ground:
    properties:
      created_at:
        type: string
      deleted_at:
        type: string
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      type:
        type: string
      updated_at:
        type: string
      venue_id:
        type: integer
    type: object
  venue.TimeSlot:
    properties:
      booked_by:
        type: integer
      booking_type:
        type: string
      court_number:
        type: integer
      created_at:
        type: string
      deleted_at:
        type: string
      end_time:
        type: string
      equipment:
        type: string
      id:
        type: integer
      is_booked:
        type: boolean
      price:
        type: number
      start_time:
        type: string
      updated_at:
        type: string
      venue_id:
        type: integer
    type: object
  venue.TimeSlotInput:
    properties:
      booking_type:
        type: string
      court_number:
        minimum: 1
        type: integer
      end_time:
        type: string
      equipment:
        type: string
      price:
        minimum: 0
        type: number
      start_time:
        type: string
    required:
    - court_number
    - end_time
    - price
    - start_time
    type: object
  venue.UpdateBookingStatusRequest:
    properties:
      status:
        enum:
        - confirmed
        - rejected
        - cancelled
        - completed
        - pending
        type: string
    required:
    - status
    type: object
  venue.Venue:
    properties:
      available:
        type: boolean
      capacity:
        type: integer
      contact_info:
        type: string
      coordinates:
        type: string
      court_count:
        type: integer
      created_at:
        type: string
      deleted_at:
        type: string
      description:
        type: string
      facilities:
        type: string
      hourly_rate:
        type: number
      id:
        type: integer
      images:
        type: string
      location:
        type: string
      manager_id:
        type: integer
      name:
        type: string
      social_hours:
        type: string
      updated_at:
        type: string
    type: object
  venue.VenueInput:
    properties:
      available:
        type: boolean
      capacity:
        type: integer
      contact_info:
        type: string
      coordinates:
        type: string
      court_count:
        minimum: 1
        type: integer
      description:
        type: string
      facilities:
        type: string
      hourly_rate:
        minimum: 0
        type: number
      images:
        type: string
      location:
        type: string
      name:
        type: string
      social_hours:
        type: string
    required:
    - court_count
    - hourly_rate
    - location
    - name
    type: object
host: localhost:8088
info:
  contact: {}
  description: "This is a  server for Sport_go\U0001F3CF."
  title: MiowNation REST API(-_-)
  version: "1.0"
paths:
  /api/bookings:
    get:
      consumes:
      - application/json
      description: Retrieves all bookings made by the current user
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Number of items per page
        in: query
        maximum: 100
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of user's bookings
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Get user's bookings
      tags:
      - bookings
    post:
      consumes:
      - application/json
      description: Creates a new booking for a specific ground/court
      parameters:
      - description: Booking details
        in: body
        name: booking
        required: true
        schema:
          $ref: '#/definitions/venue.CreateBookingRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Booking created successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Ground not found
          schema:
            additionalProperties: true
            type: object
        "409":
          description: Time slot not available
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Create a new booking
      tags:
      - bookings
  /api/bookings/{booking_id}:
    delete:
      consumes:
      - application/json
      description: Cancels a specific booking and releases the time slot
      parameters:
      - description: Booking ID
        in: path
        name: booking_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Booking cancelled successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad request
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Booking not found
          schema:
            additionalProperties: true
            type: object
        "409":
          description: Cannot cancel booking
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Cancel a booking
      tags:
      - bookings
    get:
      consumes:
      - application/json
      description: Retrieves details of a specific booking
      parameters:
      - description: Booking ID
        in: path
        name: booking_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Booking details
          schema:
            $ref: '#/definitions/venue.Booking'
        "400":
          description: Bad request
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Booking not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Get booking details
      tags:
      - bookings
  /api/venue-manager/{venue_id}/bookings:
    get:
      consumes:
      - application/json
      description: Retrieves all bookings for a venue with pagination and optional
        filters
      parameters:
      - description: Venue ID
        in: path
        name: venue_id
        required: true
        type: integer
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Number of items per page
        in: query
        maximum: 100
        name: limit
        type: integer
      - description: Filter by status (pending, confirmed, cancelled, completed, rejected)
        in: query
        name: status
        type: string
      - description: Filter by date (YYYY-MM-DD format)
        in: query
        name: date
        type: string
      - description: Filter by court ID
        in: query
        name: court_id
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of bookings and pagination metadata
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Venue not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Get bookings for a specific venue
      tags:
      - venues
  /api/venue-manager/bookings/{booking_id}/status:
    put:
      consumes:
      - application/json
      description: Updates the status of a specific booking (confirmed, rejected,
        cancelled, completed)
      parameters:
      - description: Booking ID
        in: path
        name: booking_id
        required: true
        type: integer
      - description: New status
        in: body
        name: status
        required: true
        schema:
          $ref: '#/definitions/venue.UpdateBookingStatusRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Status updated successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad request
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Booking not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Update booking status
      tags:
      - venues
  /auth/change-password:
    post:
      consumes:
      - application/json
      description: Allows an authenticated user to change their password.
      parameters:
      - description: Old and new password details
        in: body
        name: passwords
        required: true
        schema:
          $ref: '#/definitions/auth.ChangePasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Password changed successfully
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid input or password mismatch
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized or incorrect old password
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Failed to change password
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Change Password
      tags:
      - Profile
  /auth/forgot-password:
    post:
      consumes:
      - application/json
      description: Sends a password reset link/code to the user's email.
      parameters:
      - description: Email for password reset
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/auth.ForgotPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Password reset instructions sent
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid email format
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: User with this email not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Failed to process request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Forgot Password
      tags:
      - Auth
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user with email/username and password.
      parameters:
      - description: Login credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/auth.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Login successful, returns tokens and user info
          schema:
            $ref: '#/definitions/auth.AuthResponse'
        "400":
          description: Invalid input
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Invalid credentials or user not verified
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: User not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Login user
      tags:
      - Auth
  /auth/logout:
    post:
      consumes:
      - application/json
      description: Invalidates the user's current session and refresh tokens (optionally
        all sessions)
      parameters:
      - description: Logout options
        in: body
        name: request
        schema:
          $ref: '#/definitions/auth.LogoutRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Logged out successfully
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid input
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Failed to logout
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Logout User
      tags:
      - Auth
  /auth/me:
    get:
      description: Retrieves the profile of the currently authenticated user.
      produces:
      - application/json
      responses:
        "200":
          description: User profile data
          schema:
            $ref: '#/definitions/auth.UserResponse'
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: User not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get User Profile
      tags:
      - Profile
    put:
      consumes:
      - application/json
      description: Updates the profile of the currently authenticated user.
      parameters:
      - description: Profile data to update
        in: body
        name: profileData
        required: true
        schema:
          $ref: '#/definitions/auth.UpdateProfileRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Updated user profile data
          schema:
            $ref: '#/definitions/auth.UserResponse'
        "400":
          description: Invalid input
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: User not found
          schema:
            additionalProperties:
              type: string
            type: object
        "409":
          description: Username already taken
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Update User Profile
      tags:
      - Profile
  /auth/me/profile-image:
    put:
      consumes:
      - multipart/form-data
      description: Updates the profile image for the currently authenticated user.
      parameters:
      - description: Profile image file
        in: formData
        name: image
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: Profile image updated successfully
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid file or input
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Failed to upload or save image path
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Update Profile Image
      tags:
      - Profile
  /auth/refresh-token:
    post:
      consumes:
      - application/json
      description: Refreshes the access token using a valid refresh token.
      parameters:
      - description: Refresh Token Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/auth.RefreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Returns a new access token
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid input
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Invalid or expired refresh token
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Token generation failed
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Refresh Access Token
      tags:
      - Auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Create a new user with username, email, phone and password.
      parameters:
      - description: User registration details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/auth.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User registered successfully, returns tokens and user info
          schema:
            $ref: '#/definitions/auth.AuthResponse'
        "400":
          description: Validation error or invalid input
          schema:
            additionalProperties:
              type: string
            type: object
        "409":
          description: User with this email or phone or username already exists
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Register a new user
      tags:
      - Auth
  /auth/request-otp:
    post:
      consumes:
      - application/json
      description: Generate and send an OTP to the user's phone number for verification
        or login.
      parameters:
      - description: Phone Number Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/auth.OTPRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OTP sent successfully
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid phone number format
          schema:
            additionalProperties:
              type: string
            type: object
        "429":
          description: Too many OTP requests. Please try again later.
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Failed to generate or send OTP
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Request OTP
      tags:
      - Auth
  /auth/resend-verification:
    post:
      consumes:
      - application/json
      description: Resends the email verification link to the user.
      parameters:
      - description: Email to resend verification for
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/auth.ResendVerificationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Verification email resent
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid email format
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: User not found
          schema:
            additionalProperties:
              type: string
            type: object
        "409":
          description: Email already verified
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Failed to resend verification
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Resend Verification Email
      tags:
      - Auth
  /auth/reset-password:
    post:
      consumes:
      - application/json
      description: Resets the user's password using a valid reset token.
      parameters:
      - description: Password reset token and new password
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/auth.ResetPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Password reset successfully
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid input or password mismatch
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Invalid or expired reset token
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Failed to update password
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Reset Password
      tags:
      - Auth
  /auth/verify-email:
    get:
      consumes:
      - application/json
      description: Verifies a user's email address using a token.
      parameters:
      - description: Email verification token
        in: query
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Email verified successfully
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid or missing token
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Invalid or expired token
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Failed to verify email
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Verify Email
      tags:
      - Auth
  /auth/verify-otp:
    post:
      consumes:
      - application/json
      description: Verify the OTP. If user with phone doesn't exist, create one. Then
        log in user.
      parameters:
      - description: OTP Verification Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/auth.VerifyOTPRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OTP verified, tokens and user info returned
          schema:
            $ref: '#/definitions/auth.AuthResponse'
        "400":
          description: Invalid input or OTP format
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Invalid, expired, or already used OTP
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Verify OTP
      tags:
      - Auth
  /manager/venues:
    post:
      consumes:
      - application/json
      description: Create a new venue with the provided details
      parameters:
      - description: Venue information
        in: body
        name: venue
        required: true
        schema:
          $ref: '#/definitions/venue.VenueInput'
      produces:
      - application/json
      responses:
        "201":
          description: Venue created successfully
          schema:
            $ref: '#/definitions/venue.Venue'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - Bearer: []
      summary: Create a new venue
      tags:
      - venues
  /manager/venues/{venue_id}:
    delete:
      description: Delete an existing venue and all its associated data
      parameters:
      - description: Venue ID
        in: path
        name: venue_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Venue deleted successfully
          schema:
            $ref: '#/definitions/utils.SuccessResponse'
        "400":
          description: Invalid venue ID
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "403":
          description: Forbidden - not the venue manager
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "404":
          description: Venue not found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - Bearer: []
      summary: Delete venue
      tags:
      - venues
    put:
      consumes:
      - application/json
      description: Update an existing venue's details
      parameters:
      - description: Venue ID
        in: path
        name: venue_id
        required: true
        type: integer
      - description: Updated venue information
        in: body
        name: venue
        required: true
        schema:
          $ref: '#/definitions/venue.VenueInput'
      produces:
      - application/json
      responses:
        "200":
          description: Venue updated successfully
          schema:
            $ref: '#/definitions/venue.Venue'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "403":
          description: Forbidden - not the venue manager
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "404":
          description: Venue not found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - Bearer: []
      summary: Update venue
      tags:
      - venues
  /manager/venues/{venue_id}/courts:
    post:
      consumes:
      - application/json
      description: Add a new court to an existing venue
      parameters:
      - description: Venue ID
        in: path
        name: venue_id
        required: true
        type: integer
      - description: Court information
        in: body
        name: court
        required: true
        schema:
          $ref: '#/definitions/venue.CourtInput'
      produces:
      - application/json
      responses:
        "201":
          description: Court added successfully
          schema:
            $ref: '#/definitions/venue.Ground'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "403":
          description: Forbidden - not the venue manager
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "404":
          description: Venue not found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - Bearer: []
      summary: Add court to venue
      tags:
      - venues
  /manager/venues/{venue_id}/courts/{court_id}:
    delete:
      description: Delete an existing court from a venue
      parameters:
      - description: Venue ID
        in: path
        name: venue_id
        required: true
        type: integer
      - description: Court ID
        in: path
        name: court_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Court deleted successfully
          schema:
            $ref: '#/definitions/utils.SuccessResponse'
        "400":
          description: Invalid input or court doesn't belong to venue
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "403":
          description: Forbidden - not the venue manager
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "404":
          description: Court or venue not found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - Bearer: []
      summary: Delete court
      tags:
      - venues
    put:
      consumes:
      - application/json
      description: Update an existing court's details
      parameters:
      - description: Venue ID
        in: path
        name: venue_id
        required: true
        type: integer
      - description: Court ID
        in: path
        name: court_id
        required: true
        type: integer
      - description: Updated court information
        in: body
        name: court
        required: true
        schema:
          $ref: '#/definitions/venue.CourtInput'
      produces:
      - application/json
      responses:
        "200":
          description: Court updated successfully
          schema:
            $ref: '#/definitions/venue.Ground'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "403":
          description: Forbidden - not the venue manager
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "404":
          description: Court or venue not found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - Bearer: []
      summary: Update court
      tags:
      - venues
  /manager/venues/{venue_id}/timeslots:
    post:
      consumes:
      - application/json
      description: Create one or more time slots for a venue
      parameters:
      - description: Venue ID
        in: path
        name: venue_id
        required: true
        type: integer
      - description: Time slot information
        in: body
        name: timeSlots
        required: true
        schema:
          items:
            $ref: '#/definitions/venue.TimeSlotInput'
          type: array
      produces:
      - application/json
      responses:
        "201":
          description: Time slots created successfully
          schema:
            items:
              $ref: '#/definitions/venue.TimeSlot'
            type: array
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "403":
          description: Forbidden - not the venue manager
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "404":
          description: Venue not found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "409":
          description: Time slot conflict
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - Bearer: []
      summary: Create time slots
      tags:
      - venues
  /manager/venues/{venue_id}/timeslots/{timeslot_id}:
    delete:
      description: Delete an existing time slot
      parameters:
      - description: Venue ID
        in: path
        name: venue_id
        required: true
        type: integer
      - description: Time Slot ID
        in: path
        name: timeslot_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Time slot deleted successfully
          schema:
            $ref: '#/definitions/utils.SuccessResponse'
        "400":
          description: Invalid input or time slot doesn't belong to venue
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "403":
          description: Forbidden - not the venue manager
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "404":
          description: Time slot or venue not found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "409":
          description: Cannot delete a booked time slot
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - Bearer: []
      summary: Delete time slot
      tags:
      - venues
    put:
      consumes:
      - application/json
      description: Update an existing time slot's details
      parameters:
      - description: Venue ID
        in: path
        name: venue_id
        required: true
        type: integer
      - description: Time Slot ID
        in: path
        name: timeslot_id
        required: true
        type: integer
      - description: Updated time slot information
        in: body
        name: timeSlot
        required: true
        schema:
          $ref: '#/definitions/venue.TimeSlotInput'
      produces:
      - application/json
      responses:
        "200":
          description: Time slot updated successfully
          schema:
            $ref: '#/definitions/venue.TimeSlot'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "403":
          description: Forbidden - not the venue manager
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "404":
          description: Time slot or venue not found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "409":
          description: Time slot conflict
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - Bearer: []
      summary: Update time slot
      tags:
      - venues
  /manager/venues/{venue_id}/timeslots/auto:
    post:
      consumes:
      - application/json
      description: Generate time slots automatically for a venue based on specified
        parameters
      parameters:
      - description: Venue ID
        in: path
        name: venue_id
        required: true
        type: integer
      - description: Auto time slot generation parameters
        in: body
        name: autoSlots
        required: true
        schema:
          $ref: '#/definitions/venue.AutoTimeSlotInput'
      produces:
      - application/json
      responses:
        "201":
          description: Time slots created successfully
          schema:
            items:
              $ref: '#/definitions/venue.TimeSlot'
            type: array
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "403":
          description: Forbidden - not the venue manager
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "404":
          description: Venue not found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "409":
          description: Time slot conflict
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - Bearer: []
      summary: Generate time slots automatically
      tags:
      - venues
  /skills/{skill_id}:
    delete:
      description: Admin can delete a skill
      parameters:
      - description: Skill ID
        in: path
        name: skill_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Skill deleted successfully
          schema:
            $ref: '#/definitions/responses.SuccessResponse'
        "400":
          description: Invalid skill ID
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Skill not found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a skill
      tags:
      - Skills
    put:
      consumes:
      - application/json
      description: Admin can update an existing skill's details
      parameters:
      - description: Skill ID
        in: path
        name: skill_id
        required: true
        type: integer
      - description: Skill update request
        in: body
        name: skill
        required: true
        schema:
          $ref: '#/definitions/sport.UpdateSkillRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/responses.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/sport.Skill'
              type: object
        "400":
          description: Validation error or bad request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Skill not found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "409":
          description: Skill with this name already exists for its sport
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update a skill
      tags:
      - Skills
  /sports:
    get:
      description: Get a list of all available sports with optional filters
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Number of items per page
        in: query
        name: pageSize
        type: integer
      - description: Search term for name or description
        in: query
        name: search
        type: string
      - description: Filter by active status (admin only)
        in: query
        name: is_active
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/responses.PaginatedResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/sport.Sport'
                  type: array
              type: object
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Get all sports
      tags:
      - Sports
    post:
      consumes:
      - application/json
      description: Admin can create a new sport
      parameters:
      - description: Sport creation request
        in: body
        name: sport
        required: true
        schema:
          $ref: '#/definitions/sport.CreateSportRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/responses.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/sport.Sport'
              type: object
        "400":
          description: Validation error or bad request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "409":
          description: Sport with this name already exists
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new sport
      tags:
      - Sports
  /sports/{sport_id}:
    delete:
      description: Admin can delete a sport (and its associated skills due to DB constraints)
      parameters:
      - description: Sport ID
        in: path
        name: sport_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Sport deleted successfully
          schema:
            $ref: '#/definitions/responses.SuccessResponse'
        "400":
          description: Invalid sport ID
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Sport not found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a sport
      tags:
      - Sports
    get:
      description: Get details of a specific sport by its ID
      parameters:
      - description: Sport ID
        in: path
        name: sport_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/responses.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/sport.Sport'
              type: object
        "404":
          description: Sport not found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Get a sport by ID
      tags:
      - Sports
    put:
      consumes:
      - application/json
      description: Admin can update an existing sport's details
      parameters:
      - description: Sport ID
        in: path
        name: sport_id
        required: true
        type: integer
      - description: Sport update request
        in: body
        name: sport
        required: true
        schema:
          $ref: '#/definitions/sport.UpdateSportRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/responses.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/sport.Sport'
              type: object
        "400":
          description: Validation error or bad request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Sport not found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "409":
          description: Sport with this name already exists (if name changed)
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update a sport
      tags:
      - Sports
  /sports/{sport_id}/skills:
    get:
      description: Get all skills associated with a specific sport
      parameters:
      - description: Sport ID
        in: path
        name: sport_id
        required: true
        type: integer
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Number of items per page
        in: query
        name: pageSize
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/responses.PaginatedResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/sport.Skill'
                  type: array
              type: object
        "400":
          description: Invalid sport ID
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Sport not found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Get skills for a sport
      tags:
      - Skills
    post:
      consumes:
      - application/json
      description: Admin can add a new skill to a specific sport
      parameters:
      - description: Sport ID
        in: path
        name: sport_id
        required: true
        type: integer
      - description: Skill creation request
        in: body
        name: skill
        required: true
        schema:
          $ref: '#/definitions/sport.CreateSkillRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/responses.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/sport.Skill'
              type: object
        "400":
          description: Validation error or bad request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Sport not found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "409":
          description: Skill with this name already exists for this sport
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Add a skill to a sport
      tags:
      - Skills
  /users/me/sports:
    get:
      description: Authenticated user can retrieve their list of sport preferences
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/responses.SuccessResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/sport.UserSport'
                  type: array
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get logged-in user's sport preferences
      tags:
      - UserSports
    post:
      consumes:
      - application/json
      description: Authenticated user can add or update their preference for a sport,
        including position and level
      parameters:
      - description: User sport preference request
        in: body
        name: preference
        required: true
        schema:
          $ref: '#/definitions/sport.UserSportRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Preference updated
          schema:
            allOf:
            - $ref: '#/definitions/responses.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/sport.UserSport'
              type: object
        "201":
          description: Preference added
          schema:
            allOf:
            - $ref: '#/definitions/responses.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/sport.UserSport'
              type: object
        "400":
          description: Validation error or bad request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Sport not found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Add or update a sport preference for the logged-in user
      tags:
      - UserSports
  /users/me/sports/{sport_id}:
    delete:
      description: Authenticated user can remove one of their sport preferences
      parameters:
      - description: Sport ID to remove preference for
        in: path
        name: sport_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Preference removed successfully
          schema:
            $ref: '#/definitions/responses.SuccessResponse'
        "400":
          description: Invalid sport ID
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Sport preference not found for this user
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Remove a sport preference for the logged-in user
      tags:
      - UserSports
  /venues:
    get:
      description: Get a paginated list of all venues with optional filters
      parameters:
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Number of items per page (default: 10, max: 100)'
        in: query
        name: limit
        type: integer
      - description: Filter by availability
        in: query
        name: available
        type: boolean
      - description: Filter by location (partial match)
        in: query
        name: location
        type: string
      - description: Filter by minimum number of courts
        in: query
        name: min_courts
        type: integer
      - description: Filter by maximum hourly rate
        in: query
        name: max_price
        type: number
      produces:
      - application/json
      responses:
        "200":
          description: List of venues
          schema:
            allOf:
            - $ref: '#/definitions/utils.PaginatedResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/venue.Venue'
                  type: array
              type: object
        "400":
          description: Invalid query parameters
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Get all venues
      tags:
      - venues
  /venues/{venue_id}:
    get:
      description: Get detailed information about a venue by its ID
      parameters:
      - description: Venue ID
        in: path
        name: venue_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Venue details
          schema:
            $ref: '#/definitions/venue.Venue'
        "400":
          description: Invalid venue ID
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "404":
          description: Venue not found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Get venue by ID
      tags:
      - venues
  /venues/{venue_id}/courts:
    get:
      description: Get all courts for a specific venue
      parameters:
      - description: Venue ID
        in: path
        name: venue_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of courts
          schema:
            items:
              $ref: '#/definitions/venue.Ground'
            type: array
        "400":
          description: Invalid venue ID
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "404":
          description: Venue not found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Get venue courts
      tags:
      - venues
  /venues/{venue_id}/timeslots:
    get:
      description: Get time slots for a specific venue, optionally filtered by date
        and court number
      parameters:
      - description: Venue ID
        in: path
        name: venue_id
        required: true
        type: integer
      - description: Filter by date (YYYY-MM-DD format)
        in: query
        name: date
        type: string
      - description: Filter by court number
        in: query
        name: court_number
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of time slots
          schema:
            items:
              $ref: '#/definitions/venue.TimeSlot'
            type: array
        "400":
          description: Invalid input parameters
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "404":
          description: Venue not found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Get venue time slots
      tags:
      - venues
swagger: "2.0"
