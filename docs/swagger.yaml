basePath: /api
definitions:
  auth.AuthResponse:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
      user:
        $ref: '#/definitions/auth.UserResponse'
    type: object
  auth.ChangePasswordRequest:
    properties:
      new_password:
        maxLength: 72
        minLength: 8
        type: string
      old_password:
        type: string
      password_confirm:
        type: string
    required:
    - new_password
    - old_password
    - password_confirm
    type: object
  auth.ForgotPasswordRequest:
    properties:
      email:
        example: john@example.com
        type: string
    required:
    - email
    type: object
  auth.LoginRequest:
    properties:
      login_identifier:
        description: Can be email or username
        example: john@example.com
        type: string
      password:
        example: password123
        type: string
    required:
    - login_identifier
    - password
    type: object
  auth.OTPRequest:
    properties:
      phone:
        example: "+919876543210"
        type: string
    required:
    - phone
    type: object
  auth.RefreshTokenRequest:
    properties:
      refresh_token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
    required:
    - refresh_token
    type: object
  auth.RegisterRequest:
    properties:
      email:
        example: john@example.com
        type: string
      password:
        example: password123
        maxLength: 72
        minLength: 8
        type: string
      phone:
        description: e164 for international phone number format
        example: "+919876543210"
        type: string
      role:
        description: Specify allowed roles if fixed
        enum:
        - player
        - admin
        - manager
        example: player
        type: string
      username:
        example: john_doe
        maxLength: 30
        minLength: 3
        type: string
    required:
    - email
    - password
    - phone
    - username
    type: object
  auth.ResendVerificationRequest:
    properties:
      email:
        example: johndoe@example.com
        type: string
    required:
    - email
    type: object
  auth.ResetPasswordRequest:
    properties:
      password:
        example: newpassword123
        maxLength: 72
        minLength: 8
        type: string
      password_confirm:
        example: newpassword123
        type: string
      token:
        example: reset-token-123456
        type: string
    required:
    - password
    - password_confirm
    - token
    type: object
  auth.UpdateProfileRequest:
    properties:
      address:
        example: 123 Main St
        type: string
      bio:
        example: Avid cricketer and developer.
        type: string
      city:
        example: Mumbai
        type: string
      country:
        example: India
        type: string
      district:
        example: Mumbai Suburban
        type: string
      name:
        example: John Doe
        type: string
      postal_code:
        example: "400001"
        type: string
      preferred_sports:
        example: '["cricket","football"]'
        type: string
      social_media:
        example: '{"twitter":"@johndoe"}'
        type: string
      state:
        example: Maharashtra
        type: string
      username:
        example: john_doe_new
        maxLength: 30
        minLength: 3
        type: string
    type: object
  auth.UserResponse:
    properties:
      address:
        type: string
      bio:
        type: string
      city:
        type: string
      coordinates:
        description: Assuming JSON string
        type: string
      country:
        type: string
      created_at:
        type: string
      district:
        type: string
      email:
        type: string
      email_verified:
        type: boolean
      id:
        type: integer
      last_active:
        type: string
      name:
        type: string
      phone:
        type: string
      phone_verified:
        type: boolean
      postal_code:
        type: string
      preferred_sports:
        description: Assuming JSON string
        type: string
      profile_image:
        type: string
      role:
        type: string
      social_media:
        description: Assuming JSON string
        type: string
      state:
        type: string
      updated_at:
        type: string
      username:
        type: string
      verified:
        type: boolean
    type: object
  auth.VerifyOTPRequest:
    properties:
      code:
        description: Assuming 6 digit OTP
        example: "123456"
        type: string
      phone:
        example: "+919876543210"
        type: string
    required:
    - code
    - phone
    type: object
host: localhost:8088  
info:
  contact: {}
  description: This is a sample server for demonstrating Swagger with Gin.
  title: MiowNation REST API(-_-)
  version: "1.0"
paths:
  /auth/change-password:
    post:
      consumes:
      - application/json
      description: Allows an authenticated user to change their password.
      parameters:
      - description: Old and new password details
        in: body
        name: passwords
        required: true
        schema:
          $ref: '#/definitions/auth.ChangePasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Password changed successfully
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid input or password mismatch
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized or incorrect old password
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Failed to change password
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Change Password
      tags:
      - Profile
  /auth/forgot-password:
    post:
      consumes:
      - application/json
      description: Sends a password reset link/code to the user's email.
      parameters:
      - description: Email for password reset
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/auth.ForgotPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Password reset instructions sent
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid email format
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: User with this email not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Failed to process request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Forgot Password
      tags:
      - Auth
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user with email/username and password.
      parameters:
      - description: Login credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/auth.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Login successful, returns tokens and user info
          schema:
            $ref: '#/definitions/auth.AuthResponse'
        "400":
          description: Invalid input
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Invalid credentials or user not verified
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: User not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Login user
      tags:
      - Auth
  /auth/logout:
    post:
      description: Invalidates the user's refresh token.
      produces:
      - application/json
      responses:
        "200":
          description: Logged out successfully
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Refresh token missing or invalid
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Failed to logout
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Logout User
      tags:
      - Auth
  /auth/me:
    get:
      description: Retrieves the profile of the currently authenticated user.
      produces:
      - application/json
      responses:
        "200":
          description: User profile data
          schema:
            $ref: '#/definitions/auth.UserResponse'
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: User not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get User Profile
      tags:
      - Profile
    put:
      consumes:
      - application/json
      description: Updates the profile of the currently authenticated user.
      parameters:
      - description: Profile data to update
        in: body
        name: profileData
        required: true
        schema:
          $ref: '#/definitions/auth.UpdateProfileRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Updated user profile data
          schema:
            $ref: '#/definitions/auth.UserResponse'
        "400":
          description: Invalid input
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: User not found
          schema:
            additionalProperties:
              type: string
            type: object
        "409":
          description: Username already taken
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Update User Profile
      tags:
      - Profile
  /auth/me/profile-image:
    put:
      consumes:
      - multipart/form-data
      description: Updates the profile image for the currently authenticated user.
      parameters:
      - description: Profile image file
        in: formData
        name: image
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: Profile image updated successfully
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid file or input
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Failed to upload or save image path
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Update Profile Image
      tags:
      - Profile
  /auth/refresh-token:
    post:
      consumes:
      - application/json
      description: Refreshes the access token using a valid refresh token.
      parameters:
      - description: Refresh Token Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/auth.RefreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Returns a new access token
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid input
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Invalid or expired refresh token
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Token generation failed
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Refresh Access Token
      tags:
      - Auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Create a new user with username, email, phone and password.
      parameters:
      - description: User registration details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/auth.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User registered successfully, returns tokens and user info
          schema:
            $ref: '#/definitions/auth.AuthResponse'
        "400":
          description: Validation error or invalid input
          schema:
            additionalProperties:
              type: string
            type: object
        "409":
          description: User with this email or phone or username already exists
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Register a new user
      tags:
      - Auth
  /auth/request-otp:
    post:
      consumes:
      - application/json
      description: Generate and send an OTP to the user's phone number for verification
        or login.
      parameters:
      - description: Phone Number Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/auth.OTPRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OTP sent successfully
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid phone number format
          schema:
            additionalProperties:
              type: string
            type: object
        "429":
          description: Too many OTP requests. Please try again later.
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Failed to generate or send OTP
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Request OTP
      tags:
      - Auth
  /auth/resend-verification:
    post:
      consumes:
      - application/json
      description: Resends the email verification link to the user.
      parameters:
      - description: Email to resend verification for
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/auth.ResendVerificationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Verification email resent
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid email format
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: User not found
          schema:
            additionalProperties:
              type: string
            type: object
        "409":
          description: Email already verified
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Failed to resend verification
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Resend Verification Email
      tags:
      - Auth
  /auth/reset-password:
    post:
      consumes:
      - application/json
      description: Resets the user's password using a valid reset token.
      parameters:
      - description: Password reset token and new password
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/auth.ResetPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Password reset successfully
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid input or password mismatch
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Invalid or expired reset token
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Failed to update password
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Reset Password
      tags:
      - Auth
  /auth/verify-email:
    get:
      consumes:
      - application/json
      description: Verifies a user's email address using a token.
      parameters:
      - description: Email verification token
        in: query
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Email verified successfully
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid or missing token
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Invalid or expired token
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Failed to verify email
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Verify Email
      tags:
      - Auth
  /auth/verify-otp:
    post:
      consumes:
      - application/json
      description: Verify the OTP. If user with phone doesn't exist, create one. Then
        log in user.
      parameters:
      - description: OTP Verification Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/auth.VerifyOTPRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OTP verified, tokens and user info returned
          schema:
            $ref: '#/definitions/auth.AuthResponse'
        "400":
          description: Invalid input or OTP format
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Invalid, expired, or already used OTP
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Verify OTP
      tags:
      - Auth
swagger: "2.0"
